@page "/actions"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using SAPConnection.Areas.Identity.Data;
@using SAPConnection.Data;
@inject IHttpContextAccessor httpContextAccessor
@inject UserManager<ApplicationUser> userManager
@inject IHttpContextAccessor httpContextAccessor
@inject Microsoft.EntityFrameworkCore.DbContextOptions<IdentityContext> dbContextOptions
@inject LeaveService leaveService


<h3>My Actions</h3>

@if (leaves == null)
{
    <p><em>Loading...</em></p>
}
else if (leaves.Count == 0)
{
    <p><em>No Action found.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Reason</th>
                <th>From Date</th>
                <th>To Date</th>
                <th>Type</th>
                <th>Status</th>
                <th></th>
                <th></th>

                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var leave in leaves)
            {
                <tr>
                    <td>@leave.Id</td>
                    <td>@leave.Reason</td>
                    <td>@leave.FromDate.ToShortDateString()</td>
                    <td>@leave.ToDate.ToShortDateString()</td>
                    <td>@leave.LeaveType</td>
                    <td>@leave.approvalStatus</td>


                    <td>
                            
                            <a class="btn btn-primary" href="@($"/view-manager/{leave.Id}")">
                                View
                            </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    List<LeaveModel> leaves;
    string Pno;

    protected override async Task OnInitializedAsync()
    {

        var user = await userManager.GetUserAsync(httpContextAccessor.HttpContext.User);

        using var context = new IdentityContext(dbContextOptions);

        var pno = await context.Users
           .Where(u => u.Id == user.Id)
           .Select(u => u.Pno)
           .FirstOrDefaultAsync();
        Pno = pno.ToString();

        leaves = await leaveService.GetPendingActions(Pno);
    }

}
