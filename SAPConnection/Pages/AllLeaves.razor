@page "/all-leaves"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using SAPConnection.Areas.Identity.Data;
@using SAPConnection.Data;
@inject LeaveService leaveService
@inject IJSRuntime JSRuntime

@inject IHttpContextAccessor httpContextAccessor

@inject UserManager<ApplicationUser> userManager
@inject IHttpContextAccessor httpContextAccessor
@inject Microsoft.EntityFrameworkCore.DbContextOptions<IdentityContext> dbContextOptions

<CascadingAuthenticationState>
    <AuthorizeView>

        <NotAuthorized>
            @{
                <RedirectTo></RedirectTo>

            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


<h3>All Leaves</h3>



<h1>Leaves</h1>

@if (leaves == null)
{
    <p><em>Loading...</em></p>
}
else if (leaves.Count == 0)
{
    <p><em>No leaves found.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Reason</th>
                <th>From Date</th>
                <th>To Date</th>
                <th>Type</th>
                <th>Submission Status</th>
                <th>Approval Status</th>

                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var leave in leaves)
            {
                <tr>
                    <td>@leave.Id</td>
                    <td>@leave.Reason</td>
                    <td>@leave.FromDate.ToShortDateString()</td>
                    <td>@leave.ToDate.ToShortDateString()</td>
                    <td>@leave.LeaveType</td>
                    <td>@leave.submissionStatus</td>
                    <td>@leave.approvalStatus</td>


                    <td>
                        @if(leave.submissionStatus == SubmissionStatus.Draft)
                        {
                            <a class="btn btn-primary" href="@($"/leaves/{leave.Id}")">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                </svg> Edit
                            </a>
 
                        }
                       

                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<LeaveModel> leaves;
    string Pno;

    protected override async Task OnInitializedAsync()
    {
        
        var user = await userManager.GetUserAsync(httpContextAccessor.HttpContext.User);

        using var context = new IdentityContext(dbContextOptions);

        var pno = await context.Users
            .Where(u => u.Id == user.Id)
            .Select(u => u.Pno)
            .FirstOrDefaultAsync();
        Pno = pno.ToString();

        leaves = await leaveService.GetLeavesAsync(Pno);
    }

    private async Task DeleteLeave(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this leave request?" }))
        {
            await leaveService.DeleteLeaveAsync(id);
            leaves = await leaveService.GetLeavesAsync(Pno);
        }
    }
}
