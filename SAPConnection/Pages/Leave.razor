@page "/leave"
@using SAPConnection.Data
@inject LeaveService leaveService
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject AuthenticationStateProvider AuthNStateProvider
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Options;
@using SAPConnection.Areas.Identity.Data;
@inject IHttpContextAccessor httpContextAccessor
@inject UserManager<ApplicationUser> userManager
@inject IHttpContextAccessor httpContextAccessor
@inject Microsoft.EntityFrameworkCore.DbContextOptions<IdentityContext> dbContextOptions
@inject MyDbContext _context
@inject WorkFlowService WorkFlowService




<link rel="stylesheet" href="~/css/site.css" />


<div style="display : flex; align-items: end ; justify-content : center ; width : 100% ;border : 2px solid #000080 ; padding : 5px;">
    <img src="/Images/FFBL.jpg" height="80" width="230" style="display : inline;" />
</div>
<br />
<form>
    <table style="width : 100% ; padding-left : 10px ; padding-right : 10px" border="1" cellpadding="10">
        <tr style="background-color: #000080 ; width : 100%">
            <td colspan="4">
                <h5 style="color : white">Employee Details</h5>
            </td>
        </tr>
        <tr>
            <td style="text-align : left">
                <p style="font-weight : bold">Request Date:</p>
            </td>
            <td style="text-align : left">
                <InputDate  @bind-Value="@date" />
            </td>


            <td style="text-align : left">
                <p style="font-weight : bold ">Status</p>
            </td>
            <td style="text-align : left">
                <p>@newLeave.submissionStatus</p>
            </td>
        </tr>



        <tr>
            <td style="text-align : left">
                <p style="font-weight : bold">Employee Name:</p>
            </td>
            <td style="text-align : left">
                <p>@Name</p>
            </td>


            <td style="text-align : left">
                <p style="font-weight : bold">Employee Number</p>
            </td>
            <td style="text-align : left">
                <p>@Pno</p>
            </td>
        </tr>


        <tr>
            <td style="text-align : left">
                <p style="font-weight : bold">Department</p>
            </td>
            <td style="text-align : left">
                <p>@Department</p>
            </td>


            <td style="text-align : left">
                <p style="font-weight : bold">Designation</p>
            </td>
            <td style="text-align : left">
                <p>@Designation</p>
            </td>
        </tr>

    </table>
    <br />

    <table cellpadding="14" width=100%>
       
     
        <tr style="background-color: #000080; color: white; font-weight:500; font-size:larger">
            <td colspan="4">
                <label>Leave Details</label>
            </td>
        </tr>
        <tr>
            <td>
                <p style="font-weight : bold">Leave From</p>
            </td>
            <td>
                <input  type="date" size="35" @bind-value="newLeave.FromDate" />
            </td>
            <td>
                <p style="font-weight : bold">Leave To</p>
            </td>
            <td>
                <input  type="date"  @bind-value="newLeave.ToDate" />
            </td>

        </tr>
        <tr>
            <td>
                <p style="font-weight : bold">Leave Type</p>
            </td>
            <td>
                <select class="form-select border border-dark" @onclick="@fetchleaveBln" style="width:100%;" @bind="newLeave.LeaveType">
                    <option >Casual</option>
                    <option >Sick</option>
                    <option >Annual</option>
                </select>
            </td>
           <td colspan="2">
        @*<tr>*@
            <td>
                <p style="font-weight : bold">Leave Balance</p>
            </td>
            <td>
                        @*<input value="@leaveBln" type="text" readonly size="35" />*@
                <p style="font-weight : bold">@leaveBln</p>

            </td>
            <td>
                <p style="font-weight : bold">Total Balance</p>
            </td>
           
            <td>
                        @*<input value="@TotalDays" type="text" readonly size="35" />*@
                <p style="font-weight : bold">@TotalDays</p>
            </td>
        @*</tr>*@
            </td>
        </tr>
       
        <tr>
            <td>
                <label>Reason For Leave : </label>
            </td>
            <td colspan="3">
                <textarea class="border border-dark" style="width:100%" @bind="newLeave.Reason" required></textarea>
            </td>
        </tr>
        <tr>
            <td>
                <label>Attachments</label>
            </td>
            <td colspan="3">
                @*<input name = "attachment" type="file" multiple/>*@
            </td>
        </tr>
      @*  <tr>
            
            <td>

                <button style="background-color:#000080; color:white; font-size:large; border-radius:5px;  float:right;" @onclick="submitLeaves" type="submit" @onclick:preventDefault >Save as Draft</button>


            </td>
            <td>

                <input style="background-color:#000080; color:white; font-size:large; border-radius:5px; width:50%; float:right;" @onclick="submitLeaves" type="submit" @onclick:preventDefault />
            </td>
        </tr>*@


    </table>




    <div style="display : flex; align-items: end ; justify-content : end ; width : 100% ; padding : 5px;">


        <button style="width : 25%; height : 40px ; color : white; background-color : dodgerblue ; border : 1px solid #dodgerblue; border-radius : 5px" @onclick="SaveAsDraft" type="submit" @onclick:preventDefault>

            Save as Draft
        </button>

        &nbsp;

        <button style="width : 25%; height : 40px ; color : white; background-color : #000080 ; border : 1px solid #000080; border-radius : 5px" @onclick="submitLeaves" type="submit" @onclick:preventDefault>
            Submit
        </button>

    </div>

    <div>
        <div style="width:10px;">
            <div onclick="show()"
                 style="border:1px solid black;
                    float:left;
                    font-size:large;
                    width: 0;
	                height: 0;
	                border-top: 8px solid transparent;
	                border-left: 16px solid #555;
	                border-bottom: 8px solid transparent;
                ">
            </div>
        </div>
       
    </div>
    <br />
    @if (Location != -1 && newLeave.LeaveType != LeaveTypeModel.Uninitialized)
    {
        <div colspan="4" style="margin-left:30px;">
            <button @onclick="@Show"><b id="approve_route" style="cursor:pointer;">Approval Route</b></button>
        </div>

        <table style="width:100%;" hidden="@IsShow">
            <tr>
                <td colspan="4">
                    <div id="route_details" style="width:100%">

                        <table style="width:100%; text-align:center;">
                            <tr>
                                <td colspan="5" style="background-color:#000080; color:white; text-align:center;">
                                    Approval Route Detail
                                </td>
                            </tr>
                            <tr style="border:1px solid black;">
                                <th style="border:1px solid black;">
                                    <label>Level</label>
                                </th>
                                <th style="border:1px solid black;">
                                    <label>Task</label>
                                </th>
                                <th colspan="3" style="border:1px solid black; text-align:right; padding-right: 150px;">
                                    <label>Approver</label>
                                </th>
                            </tr>
                            @if (workflowApprovers != null && workflowApprovers.Count > 0)
                            {

                            @foreach (var workflowApprover in workflowApprovers.Select((value, index) => new { value, index }))
                            {
                                <tr style="border:1px solid black;">
                                    <th style="border:1px solid black;">
                                        <label>@(workflowApprover.index+1)</label>
                                    </th>
                                    <td style="border:1px solid black;">
                                        <label>@workflowApprover.value.AssignedTask</label>
                                    </td>
                                    <td colspan="3" style="border:1px solid black; text-align:right; padding-right: 100px;">
                                        <label>@workflowApprover.value.ApproverEmail</label>
                                    </td>
                                </tr>
                            }
                           

                            }

                            
                       @*     <tr style="border:1px solid black;">
                                <th style="border:1px solid black;">
                                    <label>2.</label>
                                </th>
                                <td style="border:1px solid black;">
                                    <label>Approve</label>
                                </td>
                                <td colspan="3" style="border:1px solid black; text-align:right; padding-right: 100px;">
                                    <label>sajid malik/it/ho/ffbl</label>
                                </td>
                            </tr>*@
                        </table>
                    </div>
                </td>
            </tr>
        </table>


       

    }
    <br />
</form>

@code {
    private static bool IsShow { get; set; } = true;

    string Name;
    string Designation;
    string Department;
    string Pno;
    string Date;
    int leaveBln;
    int TotalDays;
    int Location =-1;

    DateTime date = DateTime.Now.Date;

    LeaveModel newLeave = new LeaveModel();

    List<WorkflowApproverEmail> workflowApprovers;

    private async Task fetchWorkFlows()
    {

        var key = Location + "-" + newLeave.LeaveType;

        workflowApprovers = await
            WorkFlowService.GetWorkflowApproversWithEmail(key, Int32.Parse(Pno));
    }


    private async Task submitLeaves()
    {

        try
        {

            int deptId,sectId;

            var user = await userManager.GetUserAsync(httpContextAccessor.HttpContext.User);

            using var context = new IdentityContext(dbContextOptions);

            var dept = await context.Users
                .Where(u => u.Id == user.Id)
                .Select(u => u.DepartmentId)
                .FirstOrDefaultAsync();
            deptId = dept;


            var sect = await context.Users
               .Where(u => u.Id == user.Id)
               .Select(u => u.SectionId)
               .FirstOrDefaultAsync();
            sectId = sect;

            ApproversModel approvers = await _context.Approvers
        .Where(a => a.SectionId == sectId && a.DepartmentId == deptId).FirstOrDefaultAsync();


            toastService.ShowError(approvers.Id.ToString());

            newLeave.LeaveOwnerPno = Pno;
            newLeave.RouteId = approvers.Id;
            newLeave.approvalStatus = ApprovalStatus.Pending;
            newLeave.submissionStatus = SubmissionStatus.Submitted;
            await leaveService.CreateLeaveAsync(newLeave);
            NavigationManager.NavigateTo("all-leaves");



        }catch(Exception e)
        {

        }



    }

    private async Task SaveAsDraft()
    {

        try
        {

            int deptId, sectId;

            var user = await userManager.GetUserAsync(httpContextAccessor.HttpContext.User);

            using var context = new IdentityContext(dbContextOptions);






            var dept = await context.Users
                .Where(u => u.Id == user.Id)
                .Select(u => u.DepartmentId)
                .FirstOrDefaultAsync();
            deptId = dept;


            var sect = await context.Users
               .Where(u => u.Id == user.Id)
               .Select(u => u.SectionId)
               .FirstOrDefaultAsync();
            sectId = sect;

            ApproversModel approvers = await _context.Approvers
        .Where(a => a.SectionId == sectId && a.DepartmentId == deptId).FirstOrDefaultAsync();



            newLeave.LeaveOwnerPno = Pno;
            newLeave.RouteId = approvers.Id;
            newLeave.approvalStatus = ApprovalStatus.New;
            newLeave.submissionStatus = SubmissionStatus.Draft;
            await leaveService.CreateLeaveAsync(newLeave);
            NavigationManager.NavigateTo("all-leaves");



        }
        catch (Exception e)
        {

        }



    }



    private void Show()
    {
        IsShow = !IsShow;
    }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await userManager.GetUserAsync(httpContextAccessor.HttpContext.User);
            using var context = new IdentityContext(dbContextOptions);
            var AppUser = await context.Users
                .Where(u => u.Id == user.Id)
                .FirstOrDefaultAsync();
            Pno = AppUser.Pno.ToString();
            Location = AppUser.Location;
            toastService.ShowError(AppUser.Location.ToString());

            

           

            //string connectionString = "AppServerHost=10.1.25.168; SystemNumber=00; User=abapdev; Password=Ffbl@786#; Client=300; Language=EN; PoolSize=5; Trace=8";

            //using var connection = new SapNwRfc.SapConnection(connectionString);

            //connection.Connect();
            //var someFunction = connection.CreateFunction("ZBAPI_EMP_PRSNL_DETAILS");
            //var result = someFunction.Invoke<SAPRFCResult>(new SAPInputParameter
            //    {
            //        Pno = Pno,
            //    });

            ////connection.Disconnect();
            ////connection.Dispose();


            //string DevconnectionString = "AppServerHost=sapdev.ffbl.com; SystemNumber=00; User=abapdev; Password=Pakistan@786#; Client=110; Language=EN; PoolSize=5; Trace=8";

            //using var DevConnection = new SapNwRfc.SapConnection(DevconnectionString);

            //DevConnection.Connect();
            //var LeaveBalanceFunction = DevConnection.CreateFunction("ZST_LEAVE_BALN3");
            //var LeaveBalanceResult = LeaveBalanceFunction.Invoke<LeaveBalanceReturnParameter>(new LeaveBalanceInputParameter
            //    {
            //        Pno = Pno,
            //        FromDate = "20210430",
            //        ToDate = "20210430",
            //        LeaveType = "4000"

            //    });



            //Name = result.Items[0].Name.ToString();
            //Designation = result.Items[0].Designation.ToString();
            //Department = result.Items[0].Department.ToString();
            //Pno = result.Items[0].Pno.ToString();
            //Date = DateTime.Now.Date.ToString();
            //leaveBln = Convert.ToInt32(float.Parse(LeaveBalanceResult.Bal.ToString()));
            //TotalDays = Convert.ToInt32(float.Parse(LeaveBalanceResult.TotalDays.ToString()));


            //Name = "Usama Fayyaz";
            //Designation = "Management Associates";
            //Department = "ICT";
            //Pno = "30000624";
            //Date = DateTime.Now.Date.ToString();

        }
        catch (Exception e)
        {
            toastService.ShowError("We Ran into some error. Try logging in again");


        }

    }




    private async Task fetchleaveBln( )
    {
       
        int temp = (Int32) newLeave.LeaveType;
        //toastService.ShowError(temp.ToString());



       try
        {
            await fetchWorkFlows();

            
            //    string DevconnectionString = "AppServerHost=sapdev.ffbl.com; SystemNumber=00; User=abapdev; Password=Pakistan@786#; Client=110; Language=EN; PoolSize=5; Trace=8";

            //    using var DevConnection = new SapNwRfc.SapConnection(DevconnectionString);

            //    DevConnection.Connect();
            //    var LeaveBalanceFunction = DevConnection.CreateFunction("ZST_LEAVE_BALN3");
            //    var LeaveBalanceResult = LeaveBalanceFunction.Invoke<LeaveBalanceReturnParameter>(new LeaveBalanceInputParameter
            //        {
            //            Pno = Pno,
            //        FromDate = newLeave.FromDate.Date.ToString("yyyyMMdd"),
            //        ToDate = newLeave.ToDate.Date.ToString("yyyyMMdd"),
            //            LeaveType = temp.ToString()

            //        });
            //    leaveBln = Convert.ToInt32(float.Parse(LeaveBalanceResult.Bal.ToString()));
            //TotalDays = Convert.ToInt32(float.Parse(LeaveBalanceResult.TotalDays.ToString()));



                
            
        }
        catch(Exception e)
        {
            toastService.ShowError("We Ran into some error. Try logging in again");

        }
    }

}
