@page "/workflow"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using SAPConnection.Areas.Identity.Data;
@using SAPConnection.Data;
@inject MyDbContext _context
@inject UserManager<ApplicationUser> userManager
@inject IHttpContextAccessor httpContextAccessor
@inject Microsoft.EntityFrameworkCore.DbContextOptions<SAPConnectionContext> dbContextOptions
@inject WorkFlowService WorkFlowService


<form >
<div class="border p-3 mt-2">
    <div class="row pb-4">
        <h2 class="text-primary">Create a new Workflow</h2>
        <hr />
    </div>

    <div class="mb-3">
        <label>Location</label>
            <select @bind ="Location" class="form-control form-control-lg">
                <option value="1100">Plant Site</option>
                <option value="1000">Head Office</option>

            </select>
    </div>
        <div class="mb-3">
            <label>No. of Stages</label>
            <input @bind-value="@numberOfStages" type="number" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Subtype</label>
            <select  @bind="subtype" class="form-control form-control-lg">
                <option value="1000">Annual</option>
                <option value="4000">Sick</option>
                <option value="3000">Casual</option>
           </select>
        </div>
     
        @if(numberOfStages >0)
        {
            workflowItems = new List<WorkflowItem>();
            for (int i = 1; i <= numberOfStages; i++)
            {
                WorkflowItem item = new WorkflowItem();
                item.Level = i;

                workflowItems.Add(item);
            }
            <table  class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Task</th>
                        <th scope="col">Approver</th>
                    </tr>
                </thead>
                <tbody>

                @foreach(var item in workflowItems)
                    {
                        item.Key = Location.ToString() + subtype.ToString() ;
                        <tr>
                            <th scope="row">@item.Level</th>
                            <td>
                                <select  class="form-control form-control-lg"  @bind = "item.AssignedTask">
                                    <option >Review</option>
                                    <option>Approve</option>
                                </select>
                            </td>
                            <td>
                               
                                <select @bind="item.ManagerId" class="form-control form-control-lg">

                                    <option value="@SectionHeadId" >Section Head</option>
                                    <option value="@UnitManagerId">Unit Manager</option>
                                    <option value="@DepartmentHeadId">Department Head</option>
                                </select>
                            </td>
                          
                        </tr>
                    }
                  
                    
                </tbody>
            </table>
        }

        <div class="text-end m-4">

            <button style="width : 25%; height : 40px ; color : white; background-color : #000080 ; border : 1px solid #000080; border-radius : 5px" @onclick="create" type="submit" @onclick:preventDefault>
                Submit
            </button>
        </div>
      
    
</div>
</form>

@code {
    int numberOfStages=0;
    int SectionHeadId, UnitManagerId, DepartmentHeadId;
    int Location;
    int subtype;

    List<WorkflowItem> workflowItems ;
    WorkflowItem t = new WorkflowItem();

    protected override async Task OnInitializedAsync()
    {
        int deptId, sectId;

        var user = await userManager.GetUserAsync(httpContextAccessor.HttpContext.User);

        using var context = new SAPConnectionContext(dbContextOptions);

        var dept = await context.Users
            .Where(u => u.Id == user.Id)
            .Select(u => u.DepartmentId)
            .FirstOrDefaultAsync();
        deptId = dept;


        var sect = await context.Users
           .Where(u => u.Id == user.Id)
           .Select(u => u.SectionId)
           .FirstOrDefaultAsync();
        sectId = sect;
        ApproversModel approvers = await _context.Approvers
      .Where(a => a.SectionId == sectId && a.DepartmentId == deptId).FirstOrDefaultAsync();
        SectionHeadId = approvers.SectionHeadId;
        UnitManagerId = approvers.UnitManagerId;
        DepartmentHeadId = approvers.DepartmentId;
    }


    private async Task create()
    {

        foreach(WorkflowItem item in workflowItems)
        {
            await WorkFlowService.CreateWorkFlow(item);

        }

    }

}
